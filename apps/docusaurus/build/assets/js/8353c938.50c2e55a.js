"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[1329],{59744:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var s=t(63159),r=t(83581);const i={},o="Tuples and Unit",l={id:"move/book/tuples",title:"Tuples and Unit",description:"Move does not fully support tuples as one might expect coming from another language with them as a",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/move/book/tuples.md",sourceDirName:"move/book",slug:"/move/book/tuples",permalink:"/move/book/tuples",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/move/book/tuples.md",tags:[],version:"current",lastUpdatedAt:1713276994,formattedLastUpdatedAt:"2024\u5e744\u670816\u65e5",frontMatter:{},sidebar:"appSidebar",previous:{title:"References",permalink:"/move/book/references"},next:{title:"Local Variables and Scope",permalink:"/move/book/variables"}},a={},u=[{value:"Literals",id:"literals",level:2},{value:"Examples",id:"examples",level:3},{value:"Operations",id:"operations",level:2},{value:"Destructuring",id:"destructuring",level:3},{value:"Subtyping",id:"subtyping",level:2},{value:"Ownership",id:"ownership",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"tuples-and-unit",children:"Tuples and Unit"}),"\n",(0,s.jsxs)(n.p,{children:["Move does not fully support tuples as one might expect coming from another language with them as a\n",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/First-class_citizen",children:"first-class value"}),". However, in order to support multiple return values, Move has tuple-like\nexpressions. These expressions do not result in a concrete value at runtime (there are no tuples in\nthe bytecode), and as a result they are very limited: they can only appear in expressions (usually\nin the return position for a function); they cannot be bound to local variables; they cannot be\nstored in structs; and tuple types cannot be used to instantiate generics."]}),"\n",(0,s.jsxs)(n.p,{children:["Similarly, ",(0,s.jsxs)(n.a,{href:"https://en.wikipedia.org/wiki/Unit_type",children:["unit ",(0,s.jsx)(n.code,{children:"()"})]})," is a type created by the Move source language in order to be expression based.\nThe unit value ",(0,s.jsx)(n.code,{children:"()"})," does not result in any runtime value. We can consider unit",(0,s.jsx)(n.code,{children:"()"})," to be an empty\ntuple, and any restrictions that apply to tuples also apply to unit."]}),"\n",(0,s.jsxs)(n.p,{children:["It might feel weird to have tuples in the language at all given these restrictions. But one of the\nmost common use cases for tuples in other languages is for functions to allow functions to return\nmultiple values. Some languages work around this by forcing the users to write structs that contain\nthe multiple return values. However, in Move, you cannot put references inside of\n",(0,s.jsx)(n.a,{href:"/move/book/structs-and-resources",children:"structs"}),". This required Move to support multiple return values. These\nmultiple return values are all pushed on the stack at the bytecode level. At the source level, these\nmultiple return values are represented using tuples."]}),"\n",(0,s.jsx)(n.h2,{id:"literals",children:"Literals"}),"\n",(0,s.jsx)(n.p,{children:"Tuples are created by a comma separated list of expressions inside of parentheses."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Syntax"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"()"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"(): ()"})}),(0,s.jsx)(n.td,{children:"Unit, the empty tuple, or the tuple of arity 0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"(e1, ..., en)"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"(e1, ..., en): (T1, ..., Tn)"})," where ",(0,s.jsx)(n.code,{children:"e_i: Ti"})," s.t. ",(0,s.jsx)(n.code,{children:"0 < i <= n"})," and ",(0,s.jsx)(n.code,{children:"n > 0"})]}),(0,s.jsxs)(n.td,{children:["A ",(0,s.jsx)(n.code,{children:"n"}),"-tuple, a tuple of arity ",(0,s.jsx)(n.code,{children:"n"}),", a tuple with ",(0,s.jsx)(n.code,{children:"n"})," elements"]})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["Note that ",(0,s.jsx)(n.code,{children:"(e)"})," does not have type ",(0,s.jsx)(n.code,{children:"(e): (t)"}),", in other words there is no tuple with one element. If\nthere is only a single element inside the parentheses, the parentheses are only used for\ndisambiguation and do not carry any other special meaning."]}),"\n",(0,s.jsx)(n.p,{children:'Sometimes, tuples with two elements are called "pairs" and tuples with three elements are called\n"triples."'}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:'address 0x42 {\nmodule example {\n    // all 3 of these functions are equivalent\n\n    // when no return type is provided, it is assumed to be `()`\n    fun returns_unit_1() { }\n\n    // there is an implicit () value in empty expression blocks\n    fun returns_unit_2(): () { }\n\n    // explicit version of `returns_unit_1` and `returns_unit_2`\n    fun returns_unit_3(): () { () }\n\n\n    fun returns_3_values(): (u64, bool, address) {\n        (0, false, @0x42)\n    }\n    fun returns_4_values(x: &u64): (&u64, u8, u128, vector<u8>) {\n        (x, 0, 1, b"foobar")\n    }\n}\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"operations",children:"Operations"}),"\n",(0,s.jsx)(n.p,{children:"The only operation that can be done on tuples currently is destructuring."}),"\n",(0,s.jsx)(n.h3,{id:"destructuring",children:"Destructuring"}),"\n",(0,s.jsxs)(n.p,{children:["For tuples of any size, they can be destructured in either a ",(0,s.jsx)(n.code,{children:"let"})," binding or in an assignment."]}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:'address 0x42 {\nmodule example {\n    // all 3 of these functions are equivalent\n    fun returns_unit() {}\n    fun returns_2_values(): (bool, bool) { (true, false) }\n    fun returns_4_values(x: &u64): (&u64, u8, u128, vector<u8>) { (x, 0, 1, b"foobar") }\n\n    fun examples(cond: bool) {\n        let () = ();\n        let (x, y): (u8, u64) = (0, 1);\n        let (a, b, c, d) = (@0x0, 0, false, b"");\n\n        () = ();\n        (x, y) = if (cond) (1, 2) else (3, 4);\n        (a, b, c, d) = (@0x1, 1, true, b"1");\n    }\n\n    fun examples_with_function_calls() {\n        let () = returns_unit();\n        let (x, y): (bool, bool) = returns_2_values();\n        let (a, b, c, d) = returns_4_values(&0);\n\n        () = returns_unit();\n        (x, y) = returns_2_values();\n        (a, b, c, d) = returns_4_values(&1);\n    }\n}\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For more details, see ",(0,s.jsx)(n.a,{href:"/move/book/variables",children:"Move Variables"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"subtyping",children:"Subtyping"}),"\n",(0,s.jsxs)(n.p,{children:["Along with references, tuples are the only other type that have ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Subtyping",children:"subtyping"})," in Move. Tuples have\nsubtyping only in the sense that they subtype with references (in a covariant way)."]}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-move",children:"let x: &u64 = &0;\nlet y: &mut u64 = &mut 1;\n\n// (&u64, &mut u64) is a subtype of (&u64, &u64)\n// since &mut u64 is a subtype of &u64\nlet (a, b): (&u64, &u64) = (x, y);\n\n// (&mut u64, &mut u64) is a subtype of (&u64, &u64)\n// since &mut u64 is a subtype of &u64\nlet (c, d): (&u64, &u64) = (y, y);\n\n// error! (&u64, &mut u64) is NOT a subtype of (&mut u64, &mut u64)\n// since &u64 is NOT a subtype of &mut u64\nlet (e, f): (&mut u64, &mut u64) = (x, y);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"ownership",children:"Ownership"}),"\n",(0,s.jsx)(n.p,{children:"As mentioned above, tuple values don't really exist at runtime. And currently they cannot be stored\ninto local variables because of this (but it is likely that this feature will come soon). As such,\ntuples can only be moved currently, as copying them would require putting them into a local variable\nfirst."})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},83581:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(11855);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);