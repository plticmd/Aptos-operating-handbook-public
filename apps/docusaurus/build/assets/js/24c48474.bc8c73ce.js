"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[817],{17986:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>p});var s=e(63159),i=e(83581);e(3688);const r={title:"Running Move Scripts"},o="How can I run Move Scripts?",a={id:"move/move-on-aptos/scripts/running-scripts",title:"Running Move Scripts",description:"Move scripts are supported in the Aptos TypeScript SDK, Aptos Wallet Adapter,",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/move/move-on-aptos/scripts/running-scripts.md",sourceDirName:"move/move-on-aptos/scripts",slug:"/move/move-on-aptos/scripts/running-scripts",permalink:"/move/move-on-aptos/scripts/running-scripts",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/move/move-on-aptos/scripts/running-scripts.md",tags:[],version:"current",lastUpdatedAt:1713276994,formattedLastUpdatedAt:"2024\u5e744\u670816\u65e5",frontMatter:{title:"Running Move Scripts"},sidebar:"appSidebar",previous:{title:"Compiling Move Scripts",permalink:"/move/move-on-aptos/scripts/compiling-scripts"},next:{title:"Move Scripts Tutorial",permalink:"/move/move-on-aptos/scripts/script-tutorial"}},c={},p=[{value:"Running scripts with the TypeScript SDK",id:"running-scripts-with-the-typescript-sdk",level:2},{value:"Running scripts with the Aptos Wallet Adapter",id:"running-scripts-with-the-aptos-wallet-adapter",level:2},{value:"Running scripts with the CLI",id:"running-scripts-with-the-cli",level:2}];function l(t){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"how-can-i-run-move-scripts",children:"How can I run Move Scripts?"}),"\n",(0,s.jsx)(n.p,{children:"Move scripts are supported in the Aptos TypeScript SDK, Aptos Wallet Adapter,\nand in the Aptos CLI."}),"\n",(0,s.jsx)(n.h2,{id:"running-scripts-with-the-typescript-sdk",children:"Running scripts with the TypeScript SDK"}),"\n",(0,s.jsxs)(n.p,{children:["To use a script with the TypeScript SDK, add the ",(0,s.jsx)(n.code,{children:"bytecode"})," directly to the\ntransaction in place of an entry function name."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { readFileSync } from "fs";\nimport { Aptos, Account, AccountAddress } from "@aptos-labs/ts-sdk";\n\n// Setup client, and account to sign\nconst aptos = new Aptos();\nconst account = Account.generate();\n\n// Load script bytecode\nconst buffer = readFileSync("./transfer_half.mv", "buffer");\nconst bytecode = new Uint8Array.from(buffer);\n\n// Build a transaction with the bytecode of the script\nconst transaction = await aptos.transaction.build.simple({\n  sender: account.accountAddress,\n  data: {\n    bytecode,\n    typeArguments: ["0x1::aptos_coin::AptosCoin"],\n    functionArguments: ["0x1"],\n  },\n});\n\n// Submit and wait for the transaction to complete\nconst pendingTxn = await aptos.signAndSubmitTransaction({\n  signer: account,\n  transaction,\n});\nawait aptos.waitForTransaction({ transactionHash: pendingTxn.hash });\n'})}),"\n",(0,s.jsx)(n.h2,{id:"running-scripts-with-the-aptos-wallet-adapter",children:"Running scripts with the Aptos Wallet Adapter"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Not all wallets support scripts, but when the wallet supports scripts, it can be\nprovided as below"})}),"\n",(0,s.jsxs)(n.p,{children:["Similar to the TypeScript SDK, the same inputs are accepted as a transaction\ntype on the wallet adapter. Just simply load the bytecode as a hex ",(0,s.jsx)(n.code,{children:"string"})," or\na ",(0,s.jsx)(n.code,{children:"uint8array"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { useWallet } from "@aptos-labs/wallet-adapter-react";\n\n//...\n\n// Load the bytecode either as a uint8array or a hex encoded string\nconst BYTECODE_IN_HEX = "0xa11ceb0b...78979";\n\nexport default function App() {\n  const { signAndSubmitTransaction } = useWallet();\n\n  function submitScript() {\n    signAndSubmitTransaction({\n      data: {\n        bytecode: BYTECODE_IN_HEX,\n        typeArguments: ["0x1::aptos_coin::AptosCoin"],\n        functionArguments: ["0x1"],\n      },\n    });\n  }\n\n  // ...\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"running-scripts-with-the-cli",children:"Running scripts with the CLI"}),"\n",(0,s.jsx)(n.p,{children:"Running scripts with the CLI can be run with the command"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"aptos move run-script\n"})}),"\n",(0,s.jsx)(n.p,{children:"There are two ways to run it, with a pre-compiled script, or it will compile the\nscript in-place similar to the compile step."}),"\n",(0,s.jsxs)(n.p,{children:["If you already have a compiled script, you can run it\nwith ",(0,s.jsx)(n.code,{children:"--compiled-script-path"})," like the example below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"aptos move run-script --compiled-script-path /opt/git/developer-docs/apps/docusaurus/static/move-examples/scripts/transfer_half/script.mv\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Similarly, if it's not compiled, just use ",(0,s.jsx)(n.code,{children:"--script-path"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"aptos move run-script --script-path ./sources/transfer_half.move\n"})})]})}function d(t={}){const{wrapper:n}={...(0,i.R)(),...t.components};return n?(0,s.jsx)(n,{...t,children:(0,s.jsx)(l,{...t})}):l(t)}}}]);